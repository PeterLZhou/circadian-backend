// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from "graphql";
import { Context } from "../types";
import { AuthPayload } from "../types";
import { UserNode } from "./prisma-client";
import { GoogleFitAccountNode } from "./prisma-client";
import { FitbitAccountNode } from "./prisma-client";
import { RescueTimeAccountNode } from "./prisma-client";
import { SleepLogNode } from "./prisma-client";
import { SleepDataNode } from "./prisma-client";
import { HeartLogNode } from "./prisma-client";
import { HeartDataNode } from "./prisma-client";
import { StepLogNode } from "./prisma-client";
import { StepDataNode } from "./prisma-client";
import { CalorieLogNode } from "./prisma-client";
import { CalorieDataNode } from "./prisma-client";
import { DistanceLogNode } from "./prisma-client";
import { DistanceDataNode } from "./prisma-client";
import { ProductivityDataNode } from "./prisma-client";

export namespace QueryResolvers {
  export const defaultResolvers = {};

  export type MeResolver = (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => UserNode | null | Promise<UserNode | null>;

  export type UsersResolver = (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => UserNode[] | Promise<UserNode[]>;

  export type FitbitAccountsResolver = (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => FitbitAccountNode[] | Promise<FitbitAccountNode[]>;

  export type SleepDatasResolver = (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => SleepDataNode[] | Promise<SleepDataNode[]>;

  export type SleepLogsResolver = (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => SleepLogNode[] | Promise<SleepLogNode[]>;

  export interface Type {
    me: (
      parent: {},
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => UserNode | null | Promise<UserNode | null>;

    users: (
      parent: {},
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => UserNode[] | Promise<UserNode[]>;

    fitbitAccounts: (
      parent: {},
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => FitbitAccountNode[] | Promise<FitbitAccountNode[]>;

    sleepDatas: (
      parent: {},
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => SleepDataNode[] | Promise<SleepDataNode[]>;

    sleepLogs: (
      parent: {},
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => SleepLogNode[] | Promise<SleepLogNode[]>;
  }
}

export namespace MutationResolvers {
  export const defaultResolvers = {};

  export interface ArgsSignup {
    email: string;
    password: string;
  }

  export interface ArgsLogin {
    email: string;
    password: string;
  }

  export interface ArgsDeleteUser {
    userId: string;
  }

  export interface ArgsCreateRescueTimeAccount {
    userId: string;
    oneTimeCode: string;
  }

  export interface ArgsDeleteFitbitAccount {
    id: string;
  }

  export interface ArgsRefreshSleepLogs {
    userId: string;
  }

  export interface ArgsDeleteAllSleepLogs {
    userId: string;
  }

  export interface ArgsRefreshProductivityData {
    userId: string;
  }

  export interface ArgsDeleteAllProductivityData {
    userId: string;
  }

  export type SignupResolver = (
    parent: {},
    args: ArgsSignup,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => AuthPayload | Promise<AuthPayload>;

  export type LoginResolver = (
    parent: {},
    args: ArgsLogin,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => AuthPayload | Promise<AuthPayload>;

  export type DeleteUserResolver = (
    parent: {},
    args: ArgsDeleteUser,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => UserNode | null | Promise<UserNode | null>;

  export type CreateRescueTimeAccountResolver = (
    parent: {},
    args: ArgsCreateRescueTimeAccount,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => RescueTimeAccountNode | Promise<RescueTimeAccountNode>;

  export type DeleteFitbitAccountResolver = (
    parent: {},
    args: ArgsDeleteFitbitAccount,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => FitbitAccountNode | null | Promise<FitbitAccountNode | null>;

  export type RefreshSleepLogsResolver = (
    parent: {},
    args: ArgsRefreshSleepLogs,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type DeleteAllSleepLogsResolver = (
    parent: {},
    args: ArgsDeleteAllSleepLogs,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type RefreshProductivityDataResolver = (
    parent: {},
    args: ArgsRefreshProductivityData,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type DeleteAllProductivityDataResolver = (
    parent: {},
    args: ArgsDeleteAllProductivityData,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export interface Type {
    signup: (
      parent: {},
      args: ArgsSignup,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => AuthPayload | Promise<AuthPayload>;

    login: (
      parent: {},
      args: ArgsLogin,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => AuthPayload | Promise<AuthPayload>;

    deleteUser: (
      parent: {},
      args: ArgsDeleteUser,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => UserNode | null | Promise<UserNode | null>;

    createRescueTimeAccount: (
      parent: {},
      args: ArgsCreateRescueTimeAccount,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => RescueTimeAccountNode | Promise<RescueTimeAccountNode>;

    deleteFitbitAccount: (
      parent: {},
      args: ArgsDeleteFitbitAccount,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => FitbitAccountNode | null | Promise<FitbitAccountNode | null>;

    refreshSleepLogs: (
      parent: {},
      args: ArgsRefreshSleepLogs,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    deleteAllSleepLogs: (
      parent: {},
      args: ArgsDeleteAllSleepLogs,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    refreshProductivityData: (
      parent: {},
      args: ArgsRefreshProductivityData,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    deleteAllProductivityData: (
      parent: {},
      args: ArgsDeleteAllProductivityData,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
  }
}

export namespace AuthPayloadResolvers {
  export const defaultResolvers = {
    token: (parent: AuthPayload) => parent.token,
    user: (parent: AuthPayload) => parent.user
  };

  export type TokenResolver = (
    parent: AuthPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type UserResolver = (
    parent: AuthPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => UserNode | Promise<UserNode>;

  export interface Type {
    token: (
      parent: AuthPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    user: (
      parent: AuthPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => UserNode | Promise<UserNode>;
  }
}

export namespace UserResolvers {
  export const defaultResolvers = {
    id: (parent: UserNode) => parent.id,
    email: (parent: UserNode) => parent.email,
    password: (parent: UserNode) => parent.password,
    sleepLogLastUpdatedDate: (parent: UserNode) =>
      parent.sleepLogLastUpdatedDate === undefined
        ? null
        : parent.sleepLogLastUpdatedDate,
    productivityDataLastUpdatedDate: (parent: UserNode) =>
      parent.productivityDataLastUpdatedDate === undefined
        ? null
        : parent.productivityDataLastUpdatedDate,
    createdAt: (parent: UserNode) => parent.createdAt,
    updatedAt: (parent: UserNode) => parent.updatedAt
  };

  export interface ArgsProductivityData {
    day: string;
  }

  export type IdResolver = (
    parent: UserNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type EmailResolver = (
    parent: UserNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type PasswordResolver = (
    parent: UserNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type GoogleFitAccountResolver = (
    parent: UserNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => GoogleFitAccountNode | null | Promise<GoogleFitAccountNode | null>;

  export type FitbitAccountResolver = (
    parent: UserNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => FitbitAccountNode | null | Promise<FitbitAccountNode | null>;

  export type RescueTimeAccountResolver = (
    parent: UserNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => RescueTimeAccountNode | null | Promise<RescueTimeAccountNode | null>;

  export type SleepLogsResolver = (
    parent: UserNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => SleepLogNode[] | Promise<SleepLogNode[]>;

  export type ProductivityDataResolver = (
    parent: UserNode,
    args: ArgsProductivityData,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => ProductivityDataNode[] | Promise<ProductivityDataNode[]>;

  export type SleepLogLastUpdatedDateResolver = (
    parent: UserNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type ProductivityDataLastUpdatedDateResolver = (
    parent: UserNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type CreatedAtResolver = (
    parent: UserNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type UpdatedAtResolver = (
    parent: UserNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export interface Type {
    id: (
      parent: UserNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    email: (
      parent: UserNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    password: (
      parent: UserNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    googleFitAccount: (
      parent: UserNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => GoogleFitAccountNode | null | Promise<GoogleFitAccountNode | null>;

    fitbitAccount: (
      parent: UserNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => FitbitAccountNode | null | Promise<FitbitAccountNode | null>;

    rescueTimeAccount: (
      parent: UserNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => RescueTimeAccountNode | null | Promise<RescueTimeAccountNode | null>;

    sleepLogs: (
      parent: UserNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => SleepLogNode[] | Promise<SleepLogNode[]>;

    productivityData: (
      parent: UserNode,
      args: ArgsProductivityData,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => ProductivityDataNode[] | Promise<ProductivityDataNode[]>;

    sleepLogLastUpdatedDate: (
      parent: UserNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    productivityDataLastUpdatedDate: (
      parent: UserNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    createdAt: (
      parent: UserNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    updatedAt: (
      parent: UserNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
  }
}

export namespace GoogleFitAccountResolvers {
  export const defaultResolvers = {
    id: (parent: GoogleFitAccountNode) => parent.id,
    refreshToken: (parent: GoogleFitAccountNode) => parent.refreshToken,
    accessToken: (parent: GoogleFitAccountNode) => parent.accessToken,
    expiration: (parent: GoogleFitAccountNode) => parent.expiration
  };

  export type IdResolver = (
    parent: GoogleFitAccountNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type UserResolver = (
    parent: GoogleFitAccountNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => UserNode | Promise<UserNode>;

  export type RefreshTokenResolver = (
    parent: GoogleFitAccountNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type AccessTokenResolver = (
    parent: GoogleFitAccountNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type ExpirationResolver = (
    parent: GoogleFitAccountNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export interface Type {
    id: (
      parent: GoogleFitAccountNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    user: (
      parent: GoogleFitAccountNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => UserNode | Promise<UserNode>;

    refreshToken: (
      parent: GoogleFitAccountNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    accessToken: (
      parent: GoogleFitAccountNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    expiration: (
      parent: GoogleFitAccountNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
  }
}

export namespace FitbitAccountResolvers {
  export const defaultResolvers = {
    id: (parent: FitbitAccountNode) => parent.id,
    fitbitUserId: (parent: FitbitAccountNode) => parent.fitbitUserId,
    refreshToken: (parent: FitbitAccountNode) => parent.refreshToken,
    accessToken: (parent: FitbitAccountNode) => parent.accessToken,
    expiration: (parent: FitbitAccountNode) => parent.expiration
  };

  export type IdResolver = (
    parent: FitbitAccountNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type UserResolver = (
    parent: FitbitAccountNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => UserNode | Promise<UserNode>;

  export type FitbitUserIdResolver = (
    parent: FitbitAccountNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type RefreshTokenResolver = (
    parent: FitbitAccountNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type AccessTokenResolver = (
    parent: FitbitAccountNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type ExpirationResolver = (
    parent: FitbitAccountNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export interface Type {
    id: (
      parent: FitbitAccountNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    user: (
      parent: FitbitAccountNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => UserNode | Promise<UserNode>;

    fitbitUserId: (
      parent: FitbitAccountNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    refreshToken: (
      parent: FitbitAccountNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    accessToken: (
      parent: FitbitAccountNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    expiration: (
      parent: FitbitAccountNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
  }
}

export namespace RescueTimeAccountResolvers {
  export const defaultResolvers = {
    id: (parent: RescueTimeAccountNode) => parent.id,
    accessToken: (parent: RescueTimeAccountNode) => parent.accessToken,
    scope: (parent: RescueTimeAccountNode) => parent.scope
  };

  export type IdResolver = (
    parent: RescueTimeAccountNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type UserResolver = (
    parent: RescueTimeAccountNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => UserNode | Promise<UserNode>;

  export type AccessTokenResolver = (
    parent: RescueTimeAccountNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type ScopeResolver = (
    parent: RescueTimeAccountNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export interface Type {
    id: (
      parent: RescueTimeAccountNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    user: (
      parent: RescueTimeAccountNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => UserNode | Promise<UserNode>;

    accessToken: (
      parent: RescueTimeAccountNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    scope: (
      parent: RescueTimeAccountNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
  }
}

export namespace SleepLogResolvers {
  export const defaultResolvers = {
    id: (parent: SleepLogNode) => parent.id,
    dateOfSleep: (parent: SleepLogNode) => parent.dateOfSleep,
    duration: (parent: SleepLogNode) => parent.duration,
    efficiency: (parent: SleepLogNode) => parent.efficiency,
    isMainSleep: (parent: SleepLogNode) => parent.isMainSleep,
    logId: (parent: SleepLogNode) => parent.logId,
    minutesAfterWakeup: (parent: SleepLogNode) => parent.minutesAfterWakeup,
    minutesAsleep: (parent: SleepLogNode) => parent.minutesAsleep,
    minutesAwake: (parent: SleepLogNode) => parent.minutesAwake,
    minutesToFallAsleep: (parent: SleepLogNode) => parent.minutesToFallAsleep,
    startTime: (parent: SleepLogNode) => parent.startTime,
    timeInBed: (parent: SleepLogNode) => parent.timeInBed,
    type: (parent: SleepLogNode) =>
      parent.type === undefined ? null : parent.type,
    summaryDeepCount: (parent: SleepLogNode) =>
      parent.summaryDeepCount === undefined ? null : parent.summaryDeepCount,
    summaryDeepMinutes: (parent: SleepLogNode) =>
      parent.summaryDeepMinutes === undefined
        ? null
        : parent.summaryDeepMinutes,
    summaryDeepThirtyDayAvgMinutes: (parent: SleepLogNode) =>
      parent.summaryDeepThirtyDayAvgMinutes === undefined
        ? null
        : parent.summaryDeepThirtyDayAvgMinutes,
    summaryLightCount: (parent: SleepLogNode) =>
      parent.summaryLightCount === undefined ? null : parent.summaryLightCount,
    summaryLightMinutes: (parent: SleepLogNode) =>
      parent.summaryLightMinutes === undefined
        ? null
        : parent.summaryLightMinutes,
    summaryLightThirtyDayAvgMinutes: (parent: SleepLogNode) =>
      parent.summaryLightThirtyDayAvgMinutes === undefined
        ? null
        : parent.summaryLightThirtyDayAvgMinutes,
    summaryRemCount: (parent: SleepLogNode) =>
      parent.summaryRemCount === undefined ? null : parent.summaryRemCount,
    summaryRemMinutes: (parent: SleepLogNode) =>
      parent.summaryRemMinutes === undefined ? null : parent.summaryRemMinutes,
    summaryRemThirtyDayAvgMinutes: (parent: SleepLogNode) =>
      parent.summaryRemThirtyDayAvgMinutes === undefined
        ? null
        : parent.summaryRemThirtyDayAvgMinutes,
    summaryWakeCount: (parent: SleepLogNode) =>
      parent.summaryWakeCount === undefined ? null : parent.summaryWakeCount,
    summaryWakeMinutes: (parent: SleepLogNode) =>
      parent.summaryWakeMinutes === undefined
        ? null
        : parent.summaryWakeMinutes,
    summaryWakeThirtyDayAvgMinutes: (parent: SleepLogNode) =>
      parent.summaryWakeThirtyDayAvgMinutes === undefined
        ? null
        : parent.summaryWakeThirtyDayAvgMinutes,
    summaryAsleepCount: (parent: SleepLogNode) =>
      parent.summaryAsleepCount === undefined
        ? null
        : parent.summaryAsleepCount,
    summaryAsleepMinutes: (parent: SleepLogNode) =>
      parent.summaryAsleepMinutes === undefined
        ? null
        : parent.summaryAsleepMinutes,
    summaryAwakeCount: (parent: SleepLogNode) =>
      parent.summaryAwakeCount === undefined ? null : parent.summaryAwakeCount,
    summaryAwakeMinutes: (parent: SleepLogNode) =>
      parent.summaryAwakeMinutes === undefined
        ? null
        : parent.summaryAwakeMinutes,
    summaryRestlessCount: (parent: SleepLogNode) =>
      parent.summaryRestlessCount === undefined
        ? null
        : parent.summaryRestlessCount,
    summaryRestlessMinutes: (parent: SleepLogNode) =>
      parent.summaryRestlessMinutes === undefined
        ? null
        : parent.summaryRestlessMinutes
  };

  export type IdResolver = (
    parent: SleepLogNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type UserResolver = (
    parent: SleepLogNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => UserNode | Promise<UserNode>;

  export type DateOfSleepResolver = (
    parent: SleepLogNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type DurationResolver = (
    parent: SleepLogNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export type EfficiencyResolver = (
    parent: SleepLogNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export type IsMainSleepResolver = (
    parent: SleepLogNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  export type LogIdResolver = (
    parent: SleepLogNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export type MinutesAfterWakeupResolver = (
    parent: SleepLogNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export type MinutesAsleepResolver = (
    parent: SleepLogNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export type MinutesAwakeResolver = (
    parent: SleepLogNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export type MinutesToFallAsleepResolver = (
    parent: SleepLogNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export type StartTimeResolver = (
    parent: SleepLogNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type TimeInBedResolver = (
    parent: SleepLogNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export type TypeResolver = (
    parent: SleepLogNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type SleepDataResolver = (
    parent: SleepLogNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => SleepDataNode[] | Promise<SleepDataNode[]>;

  export type SummaryDeepCountResolver = (
    parent: SleepLogNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  export type SummaryDeepMinutesResolver = (
    parent: SleepLogNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  export type SummaryDeepThirtyDayAvgMinutesResolver = (
    parent: SleepLogNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  export type SummaryLightCountResolver = (
    parent: SleepLogNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  export type SummaryLightMinutesResolver = (
    parent: SleepLogNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  export type SummaryLightThirtyDayAvgMinutesResolver = (
    parent: SleepLogNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  export type SummaryRemCountResolver = (
    parent: SleepLogNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  export type SummaryRemMinutesResolver = (
    parent: SleepLogNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  export type SummaryRemThirtyDayAvgMinutesResolver = (
    parent: SleepLogNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  export type SummaryWakeCountResolver = (
    parent: SleepLogNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  export type SummaryWakeMinutesResolver = (
    parent: SleepLogNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  export type SummaryWakeThirtyDayAvgMinutesResolver = (
    parent: SleepLogNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  export type SummaryAsleepCountResolver = (
    parent: SleepLogNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  export type SummaryAsleepMinutesResolver = (
    parent: SleepLogNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  export type SummaryAwakeCountResolver = (
    parent: SleepLogNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  export type SummaryAwakeMinutesResolver = (
    parent: SleepLogNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  export type SummaryRestlessCountResolver = (
    parent: SleepLogNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  export type SummaryRestlessMinutesResolver = (
    parent: SleepLogNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  export interface Type {
    id: (
      parent: SleepLogNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    user: (
      parent: SleepLogNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => UserNode | Promise<UserNode>;

    dateOfSleep: (
      parent: SleepLogNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    duration: (
      parent: SleepLogNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;

    efficiency: (
      parent: SleepLogNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;

    isMainSleep: (
      parent: SleepLogNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;

    logId: (
      parent: SleepLogNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;

    minutesAfterWakeup: (
      parent: SleepLogNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;

    minutesAsleep: (
      parent: SleepLogNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;

    minutesAwake: (
      parent: SleepLogNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;

    minutesToFallAsleep: (
      parent: SleepLogNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;

    startTime: (
      parent: SleepLogNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    timeInBed: (
      parent: SleepLogNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;

    type: (
      parent: SleepLogNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    sleepData: (
      parent: SleepLogNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => SleepDataNode[] | Promise<SleepDataNode[]>;

    summaryDeepCount: (
      parent: SleepLogNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;

    summaryDeepMinutes: (
      parent: SleepLogNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;

    summaryDeepThirtyDayAvgMinutes: (
      parent: SleepLogNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;

    summaryLightCount: (
      parent: SleepLogNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;

    summaryLightMinutes: (
      parent: SleepLogNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;

    summaryLightThirtyDayAvgMinutes: (
      parent: SleepLogNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;

    summaryRemCount: (
      parent: SleepLogNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;

    summaryRemMinutes: (
      parent: SleepLogNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;

    summaryRemThirtyDayAvgMinutes: (
      parent: SleepLogNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;

    summaryWakeCount: (
      parent: SleepLogNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;

    summaryWakeMinutes: (
      parent: SleepLogNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;

    summaryWakeThirtyDayAvgMinutes: (
      parent: SleepLogNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;

    summaryAsleepCount: (
      parent: SleepLogNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;

    summaryAsleepMinutes: (
      parent: SleepLogNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;

    summaryAwakeCount: (
      parent: SleepLogNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;

    summaryAwakeMinutes: (
      parent: SleepLogNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;

    summaryRestlessCount: (
      parent: SleepLogNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;

    summaryRestlessMinutes: (
      parent: SleepLogNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;
  }
}

export namespace SleepDataResolvers {
  export const defaultResolvers = {
    id: (parent: SleepDataNode) => parent.id,
    dateTime: (parent: SleepDataNode) => parent.dateTime,
    level: (parent: SleepDataNode) => parent.level,
    second: (parent: SleepDataNode) => parent.second
  };

  export type IdResolver = (
    parent: SleepDataNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type SleepLogResolver = (
    parent: SleepDataNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => SleepLogNode | Promise<SleepLogNode>;

  export type DateTimeResolver = (
    parent: SleepDataNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type LevelResolver = (
    parent: SleepDataNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type SecondResolver = (
    parent: SleepDataNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export interface Type {
    id: (
      parent: SleepDataNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    sleepLog: (
      parent: SleepDataNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => SleepLogNode | Promise<SleepLogNode>;

    dateTime: (
      parent: SleepDataNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    level: (
      parent: SleepDataNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    second: (
      parent: SleepDataNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;
  }
}

export namespace HeartLogResolvers {
  export const defaultResolvers = {
    id: (parent: HeartLogNode) => parent.id,
    dateTime: (parent: HeartLogNode) => parent.dateTime,
    caloriesOutOfRange: (parent: HeartLogNode) => parent.caloriesOutOfRange,
    minutesOutOfRange: (parent: HeartLogNode) => parent.minutesOutOfRange,
    maxValueOutOfRange: (parent: HeartLogNode) => parent.maxValueOutOfRange,
    minValueOutOfRange: (parent: HeartLogNode) => parent.minValueOutOfRange,
    caloriesFatBurn: (parent: HeartLogNode) => parent.caloriesFatBurn,
    minutesFatBurn: (parent: HeartLogNode) => parent.minutesFatBurn,
    maxValueFatBurn: (parent: HeartLogNode) => parent.maxValueFatBurn,
    minValueFatBurn: (parent: HeartLogNode) => parent.minValueFatBurn,
    caloriesCardio: (parent: HeartLogNode) => parent.caloriesCardio,
    minutesCardio: (parent: HeartLogNode) => parent.minutesCardio,
    maxValueCardio: (parent: HeartLogNode) => parent.maxValueCardio,
    minValueCardio: (parent: HeartLogNode) => parent.minValueCardio,
    caloriesPeak: (parent: HeartLogNode) => parent.caloriesPeak,
    minutesPeak: (parent: HeartLogNode) => parent.minutesPeak,
    maxValuePeak: (parent: HeartLogNode) => parent.maxValuePeak,
    minValuePeak: (parent: HeartLogNode) => parent.minValuePeak
  };

  export type IdResolver = (
    parent: HeartLogNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type UserResolver = (
    parent: HeartLogNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => UserNode | Promise<UserNode>;

  export type DateTimeResolver = (
    parent: HeartLogNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type CaloriesOutOfRangeResolver = (
    parent: HeartLogNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export type MinutesOutOfRangeResolver = (
    parent: HeartLogNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export type MaxValueOutOfRangeResolver = (
    parent: HeartLogNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export type MinValueOutOfRangeResolver = (
    parent: HeartLogNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export type CaloriesFatBurnResolver = (
    parent: HeartLogNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export type MinutesFatBurnResolver = (
    parent: HeartLogNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export type MaxValueFatBurnResolver = (
    parent: HeartLogNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export type MinValueFatBurnResolver = (
    parent: HeartLogNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export type CaloriesCardioResolver = (
    parent: HeartLogNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export type MinutesCardioResolver = (
    parent: HeartLogNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export type MaxValueCardioResolver = (
    parent: HeartLogNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export type MinValueCardioResolver = (
    parent: HeartLogNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export type CaloriesPeakResolver = (
    parent: HeartLogNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export type MinutesPeakResolver = (
    parent: HeartLogNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export type MaxValuePeakResolver = (
    parent: HeartLogNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export type MinValuePeakResolver = (
    parent: HeartLogNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export type HeartDataResolver = (
    parent: HeartLogNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => HeartDataNode[] | Promise<HeartDataNode[]>;

  export interface Type {
    id: (
      parent: HeartLogNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    user: (
      parent: HeartLogNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => UserNode | Promise<UserNode>;

    dateTime: (
      parent: HeartLogNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    caloriesOutOfRange: (
      parent: HeartLogNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;

    minutesOutOfRange: (
      parent: HeartLogNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;

    maxValueOutOfRange: (
      parent: HeartLogNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;

    minValueOutOfRange: (
      parent: HeartLogNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;

    caloriesFatBurn: (
      parent: HeartLogNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;

    minutesFatBurn: (
      parent: HeartLogNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;

    maxValueFatBurn: (
      parent: HeartLogNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;

    minValueFatBurn: (
      parent: HeartLogNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;

    caloriesCardio: (
      parent: HeartLogNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;

    minutesCardio: (
      parent: HeartLogNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;

    maxValueCardio: (
      parent: HeartLogNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;

    minValueCardio: (
      parent: HeartLogNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;

    caloriesPeak: (
      parent: HeartLogNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;

    minutesPeak: (
      parent: HeartLogNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;

    maxValuePeak: (
      parent: HeartLogNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;

    minValuePeak: (
      parent: HeartLogNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;

    heartData: (
      parent: HeartLogNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => HeartDataNode[] | Promise<HeartDataNode[]>;
  }
}

export namespace HeartDataResolvers {
  export const defaultResolvers = {
    id: (parent: HeartDataNode) => parent.id,
    dateTime: (parent: HeartDataNode) => parent.dateTime,
    heartRate: (parent: HeartDataNode) => parent.heartRate
  };

  export type IdResolver = (
    parent: HeartDataNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type HeartLogResolver = (
    parent: HeartDataNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => HeartLogNode | Promise<HeartLogNode>;

  export type DateTimeResolver = (
    parent: HeartDataNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type HeartRateResolver = (
    parent: HeartDataNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export interface Type {
    id: (
      parent: HeartDataNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    heartLog: (
      parent: HeartDataNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => HeartLogNode | Promise<HeartLogNode>;

    dateTime: (
      parent: HeartDataNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    heartRate: (
      parent: HeartDataNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;
  }
}

export namespace StepLogResolvers {
  export const defaultResolvers = {
    id: (parent: StepLogNode) => parent.id,
    date: (parent: StepLogNode) => parent.date,
    totalSteps: (parent: StepLogNode) => parent.totalSteps
  };

  export type IdResolver = (
    parent: StepLogNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type UserResolver = (
    parent: StepLogNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => UserNode | Promise<UserNode>;

  export type DateResolver = (
    parent: StepLogNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type TotalStepsResolver = (
    parent: StepLogNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export type StepDataResolver = (
    parent: StepLogNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => StepDataNode[] | Promise<StepDataNode[]>;

  export interface Type {
    id: (
      parent: StepLogNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    user: (
      parent: StepLogNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => UserNode | Promise<UserNode>;

    date: (
      parent: StepLogNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    totalSteps: (
      parent: StepLogNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;

    stepData: (
      parent: StepLogNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => StepDataNode[] | Promise<StepDataNode[]>;
  }
}

export namespace StepDataResolvers {
  export const defaultResolvers = {
    id: (parent: StepDataNode) => parent.id,
    dateTime: (parent: StepDataNode) => parent.dateTime,
    steps: (parent: StepDataNode) => parent.steps
  };

  export type IdResolver = (
    parent: StepDataNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type StepLogResolver = (
    parent: StepDataNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => StepLogNode | Promise<StepLogNode>;

  export type DateTimeResolver = (
    parent: StepDataNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type StepsResolver = (
    parent: StepDataNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export interface Type {
    id: (
      parent: StepDataNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    stepLog: (
      parent: StepDataNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => StepLogNode | Promise<StepLogNode>;

    dateTime: (
      parent: StepDataNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    steps: (
      parent: StepDataNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;
  }
}

export namespace CalorieLogResolvers {
  export const defaultResolvers = {
    id: (parent: CalorieLogNode) => parent.id,
    date: (parent: CalorieLogNode) => parent.date,
    totalCalories: (parent: CalorieLogNode) => parent.totalCalories
  };

  export type IdResolver = (
    parent: CalorieLogNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type UserResolver = (
    parent: CalorieLogNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => UserNode | Promise<UserNode>;

  export type DateResolver = (
    parent: CalorieLogNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type TotalCaloriesResolver = (
    parent: CalorieLogNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export type CalorieDataResolver = (
    parent: CalorieLogNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => CalorieDataNode[] | Promise<CalorieDataNode[]>;

  export interface Type {
    id: (
      parent: CalorieLogNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    user: (
      parent: CalorieLogNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => UserNode | Promise<UserNode>;

    date: (
      parent: CalorieLogNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    totalCalories: (
      parent: CalorieLogNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;

    calorieData: (
      parent: CalorieLogNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => CalorieDataNode[] | Promise<CalorieDataNode[]>;
  }
}

export namespace CalorieDataResolvers {
  export const defaultResolvers = {
    id: (parent: CalorieDataNode) => parent.id,
    dateTime: (parent: CalorieDataNode) => parent.dateTime,
    calories: (parent: CalorieDataNode) => parent.calories
  };

  export type IdResolver = (
    parent: CalorieDataNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type CalorieLogResolver = (
    parent: CalorieDataNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => CalorieLogNode | Promise<CalorieLogNode>;

  export type DateTimeResolver = (
    parent: CalorieDataNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type CaloriesResolver = (
    parent: CalorieDataNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export interface Type {
    id: (
      parent: CalorieDataNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    calorieLog: (
      parent: CalorieDataNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => CalorieLogNode | Promise<CalorieLogNode>;

    dateTime: (
      parent: CalorieDataNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    calories: (
      parent: CalorieDataNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;
  }
}

export namespace DistanceLogResolvers {
  export const defaultResolvers = {
    id: (parent: DistanceLogNode) => parent.id,
    date: (parent: DistanceLogNode) => parent.date,
    totalDistance: (parent: DistanceLogNode) => parent.totalDistance
  };

  export type IdResolver = (
    parent: DistanceLogNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type UserResolver = (
    parent: DistanceLogNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => UserNode | Promise<UserNode>;

  export type DateResolver = (
    parent: DistanceLogNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type TotalDistanceResolver = (
    parent: DistanceLogNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export type DistanceDataResolver = (
    parent: DistanceLogNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => DistanceDataNode[] | Promise<DistanceDataNode[]>;

  export interface Type {
    id: (
      parent: DistanceLogNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    user: (
      parent: DistanceLogNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => UserNode | Promise<UserNode>;

    date: (
      parent: DistanceLogNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    totalDistance: (
      parent: DistanceLogNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;

    distanceData: (
      parent: DistanceLogNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => DistanceDataNode[] | Promise<DistanceDataNode[]>;
  }
}

export namespace DistanceDataResolvers {
  export const defaultResolvers = {
    id: (parent: DistanceDataNode) => parent.id,
    dateTime: (parent: DistanceDataNode) => parent.dateTime,
    distance: (parent: DistanceDataNode) => parent.distance
  };

  export type IdResolver = (
    parent: DistanceDataNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type DistanceLogResolver = (
    parent: DistanceDataNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => DistanceLogNode | Promise<DistanceLogNode>;

  export type DateTimeResolver = (
    parent: DistanceDataNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type DistanceResolver = (
    parent: DistanceDataNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export interface Type {
    id: (
      parent: DistanceDataNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    distanceLog: (
      parent: DistanceDataNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => DistanceLogNode | Promise<DistanceLogNode>;

    dateTime: (
      parent: DistanceDataNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    distance: (
      parent: DistanceDataNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;
  }
}

export namespace ProductivityDataResolvers {
  export const defaultResolvers = {
    id: (parent: ProductivityDataNode) => parent.id,
    startTime: (parent: ProductivityDataNode) => parent.startTime,
    duration: (parent: ProductivityDataNode) => parent.duration,
    activity: (parent: ProductivityDataNode) => parent.activity,
    category: (parent: ProductivityDataNode) => parent.category,
    productivity: (parent: ProductivityDataNode) => parent.productivity
  };

  export type IdResolver = (
    parent: ProductivityDataNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type StartTimeResolver = (
    parent: ProductivityDataNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type DurationResolver = (
    parent: ProductivityDataNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export type ActivityResolver = (
    parent: ProductivityDataNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type CategoryResolver = (
    parent: ProductivityDataNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type ProductivityResolver = (
    parent: ProductivityDataNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export interface Type {
    id: (
      parent: ProductivityDataNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    startTime: (
      parent: ProductivityDataNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    duration: (
      parent: ProductivityDataNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;

    activity: (
      parent: ProductivityDataNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    category: (
      parent: ProductivityDataNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    productivity: (
      parent: ProductivityDataNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;
  }
}

export interface Resolvers {
  Query: QueryResolvers.Type;
  Mutation: MutationResolvers.Type;
  AuthPayload: AuthPayloadResolvers.Type;
  User: UserResolvers.Type;
  GoogleFitAccount: GoogleFitAccountResolvers.Type;
  FitbitAccount: FitbitAccountResolvers.Type;
  RescueTimeAccount: RescueTimeAccountResolvers.Type;
  SleepLog: SleepLogResolvers.Type;
  SleepData: SleepDataResolvers.Type;
  HeartLog: HeartLogResolvers.Type;
  HeartData: HeartDataResolvers.Type;
  StepLog: StepLogResolvers.Type;
  StepData: StepDataResolvers.Type;
  CalorieLog: CalorieLogResolvers.Type;
  CalorieData: CalorieDataResolvers.Type;
  DistanceLog: DistanceLogResolvers.Type;
  DistanceData: DistanceDataResolvers.Type;
  ProductivityData: ProductivityDataResolvers.Type;
}
