// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from "graphql";
import { Context } from "../types";
import { AuthPayload } from "../types";
import { UserNode } from "./prisma-client";
import { GoogleFitAccountNode } from "./prisma-client";
import { GoogleFitAccessTokenNode } from "./prisma-client";

export namespace QueryResolvers {
  export const defaultResolvers = {};

  export type MeResolver = (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => UserNode | null | Promise<UserNode | null>;

  export interface Type {
    me: (
      parent: {},
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => UserNode | null | Promise<UserNode | null>;
  }
}

export namespace MutationResolvers {
  export const defaultResolvers = {};

  export interface ArgsSignup {
    email: string;
    password: string;
  }

  export interface ArgsLogin {
    email: string;
    password: string;
  }

  export type SignupResolver = (
    parent: {},
    args: ArgsSignup,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => AuthPayload | Promise<AuthPayload>;

  export type LoginResolver = (
    parent: {},
    args: ArgsLogin,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => AuthPayload | Promise<AuthPayload>;

  export interface Type {
    signup: (
      parent: {},
      args: ArgsSignup,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => AuthPayload | Promise<AuthPayload>;

    login: (
      parent: {},
      args: ArgsLogin,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => AuthPayload | Promise<AuthPayload>;
  }
}

export namespace AuthPayloadResolvers {
  export const defaultResolvers = {
    token: (parent: AuthPayload) => parent.token,
    user: (parent: AuthPayload) => parent.user
  };

  export type TokenResolver = (
    parent: AuthPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type UserResolver = (
    parent: AuthPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => UserNode | Promise<UserNode>;

  export interface Type {
    token: (
      parent: AuthPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    user: (
      parent: AuthPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => UserNode | Promise<UserNode>;
  }
}

export namespace UserResolvers {
  export const defaultResolvers = {
    id: (parent: UserNode) => parent.id,
    email: (parent: UserNode) => parent.email,
    createdAt: (parent: UserNode) => parent.createdAt
  };

  export type IdResolver = (
    parent: UserNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type EmailResolver = (
    parent: UserNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type GoogleFitAccountResolver = (
    parent: UserNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => GoogleFitAccountNode | null | Promise<GoogleFitAccountNode | null>;

  export type CreatedAtResolver = (
    parent: UserNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export interface Type {
    id: (
      parent: UserNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    email: (
      parent: UserNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    googleFitAccount: (
      parent: UserNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => GoogleFitAccountNode | null | Promise<GoogleFitAccountNode | null>;

    createdAt: (
      parent: UserNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
  }
}

export namespace GoogleFitAccountResolvers {
  export const defaultResolvers = {
    id: (parent: GoogleFitAccountNode) => parent.id,
    refreshToken: (parent: GoogleFitAccountNode) => parent.refreshToken
  };

  export type IdResolver = (
    parent: GoogleFitAccountNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type RefreshTokenResolver = (
    parent: GoogleFitAccountNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type AccessTokenResolver = (
    parent: GoogleFitAccountNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => GoogleFitAccessTokenNode | Promise<GoogleFitAccessTokenNode>;

  export interface Type {
    id: (
      parent: GoogleFitAccountNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    refreshToken: (
      parent: GoogleFitAccountNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    accessToken: (
      parent: GoogleFitAccountNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => GoogleFitAccessTokenNode | Promise<GoogleFitAccessTokenNode>;
  }
}

export namespace GoogleFitAccessTokenResolvers {
  export const defaultResolvers = {
    id: (parent: GoogleFitAccessTokenNode) => parent.id,
    account_id: (parent: GoogleFitAccessTokenNode) => parent.account_id,
    value: (parent: GoogleFitAccessTokenNode) => parent.value,
    expiration: (parent: GoogleFitAccessTokenNode) => parent.expiration
  };

  export type IdResolver = (
    parent: GoogleFitAccessTokenNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type Account_idResolver = (
    parent: GoogleFitAccessTokenNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type ValueResolver = (
    parent: GoogleFitAccessTokenNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type ExpirationResolver = (
    parent: GoogleFitAccessTokenNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export interface Type {
    id: (
      parent: GoogleFitAccessTokenNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    account_id: (
      parent: GoogleFitAccessTokenNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    value: (
      parent: GoogleFitAccessTokenNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    expiration: (
      parent: GoogleFitAccessTokenNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
  }
}

export interface Resolvers {
  Query: QueryResolvers.Type;
  Mutation: MutationResolvers.Type;
  AuthPayload: AuthPayloadResolvers.Type;
  User: UserResolvers.Type;
  GoogleFitAccount: GoogleFitAccountResolvers.Type;
  GoogleFitAccessToken: GoogleFitAccessTokenResolvers.Type;
}
