// Code generated by Prisma (prisma@1.19.3). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode, GraphQLSchema } from "graphql";
import { IResolvers } from "graphql-tools/dist/Interfaces";
import { makePrismaClientClass, BaseClientOptions } from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  googleFitAccessToken: (
    where?: GoogleFitAccessTokenWhereInput
  ) => Promise<boolean>;
  googleFitAccount: (where?: GoogleFitAccountWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  googleFitAccessToken: (
    where: GoogleFitAccessTokenWhereUniqueInput
  ) => GoogleFitAccessToken;
  googleFitAccessTokens: (
    args?: {
      where?: GoogleFitAccessTokenWhereInput;
      orderBy?: GoogleFitAccessTokenOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<GoogleFitAccessTokenNode>;
  googleFitAccessTokensConnection: (
    args?: {
      where?: GoogleFitAccessTokenWhereInput;
      orderBy?: GoogleFitAccessTokenOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => GoogleFitAccessTokenConnection;
  googleFitAccount: (
    where: GoogleFitAccountWhereUniqueInput
  ) => GoogleFitAccount;
  googleFitAccounts: (
    args?: {
      where?: GoogleFitAccountWhereInput;
      orderBy?: GoogleFitAccountOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<GoogleFitAccountNode>;
  googleFitAccountsConnection: (
    args?: {
      where?: GoogleFitAccountWhereInput;
      orderBy?: GoogleFitAccountOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => GoogleFitAccountConnection;
  user: (where: UserWhereUniqueInput) => User;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<UserNode>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnection;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createGoogleFitAccessToken: (
    data: GoogleFitAccessTokenCreateInput
  ) => GoogleFitAccessToken;
  updateGoogleFitAccessToken: (
    args: {
      data: GoogleFitAccessTokenUpdateInput;
      where: GoogleFitAccessTokenWhereUniqueInput;
    }
  ) => GoogleFitAccessToken;
  updateManyGoogleFitAccessTokens: (
    args: {
      data: GoogleFitAccessTokenUpdateInput;
      where?: GoogleFitAccessTokenWhereInput;
    }
  ) => BatchPayload;
  upsertGoogleFitAccessToken: (
    args: {
      where: GoogleFitAccessTokenWhereUniqueInput;
      create: GoogleFitAccessTokenCreateInput;
      update: GoogleFitAccessTokenUpdateInput;
    }
  ) => GoogleFitAccessToken;
  deleteGoogleFitAccessToken: (
    where: GoogleFitAccessTokenWhereUniqueInput
  ) => GoogleFitAccessToken;
  deleteManyGoogleFitAccessTokens: (
    where?: GoogleFitAccessTokenWhereInput
  ) => BatchPayload;
  createGoogleFitAccount: (
    data: GoogleFitAccountCreateInput
  ) => GoogleFitAccount;
  updateGoogleFitAccount: (
    args: {
      data: GoogleFitAccountUpdateInput;
      where: GoogleFitAccountWhereUniqueInput;
    }
  ) => GoogleFitAccount;
  updateManyGoogleFitAccounts: (
    args: {
      data: GoogleFitAccountUpdateInput;
      where?: GoogleFitAccountWhereInput;
    }
  ) => BatchPayload;
  upsertGoogleFitAccount: (
    args: {
      where: GoogleFitAccountWhereUniqueInput;
      create: GoogleFitAccountCreateInput;
      update: GoogleFitAccountUpdateInput;
    }
  ) => GoogleFitAccount;
  deleteGoogleFitAccount: (
    where: GoogleFitAccountWhereUniqueInput
  ) => GoogleFitAccount;
  deleteManyGoogleFitAccounts: (
    where?: GoogleFitAccountWhereInput
  ) => BatchPayload;
  createUser: (data: UserCreateInput) => User;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => User;
  updateManyUsers: (
    args: { data: UserUpdateInput; where?: UserWhereInput }
  ) => BatchPayload;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => User;
  deleteUser: (where: UserWhereUniqueInput) => User;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayload;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  googleFitAccessToken: (
    where?: GoogleFitAccessTokenSubscriptionWhereInput
  ) => GoogleFitAccessTokenSubscriptionPayloadSubscription;
  googleFitAccount: (
    where?: GoogleFitAccountSubscriptionWhereInput
  ) => GoogleFitAccountSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type GoogleFitAccessTokenOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "account_id_ASC"
  | "account_id_DESC"
  | "value_ASC"
  | "value_DESC"
  | "expiration_ASC"
  | "expiration_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type GoogleFitAccountOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "refreshToken_ASC"
  | "refreshToken_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export interface UserCreateInput {
  email: String;
  password: String;
  googleFitAccount?: GoogleFitAccountCreateOneInput;
}

export interface GoogleFitAccessTokenCreateInput {
  account_id: ID_Input;
  value: String;
  expiration: DateTimeInput;
}

export interface GoogleFitAccessTokenUpsertNestedInput {
  update: GoogleFitAccessTokenUpdateDataInput;
  create: GoogleFitAccessTokenCreateInput;
}

export type GoogleFitAccessTokenWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface GoogleFitAccessTokenUpdateDataInput {
  account_id?: ID_Input;
  value?: String;
  expiration?: DateTimeInput;
}

export interface GoogleFitAccessTokenSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: GoogleFitAccessTokenWhereInput;
  AND?:
    | GoogleFitAccessTokenSubscriptionWhereInput[]
    | GoogleFitAccessTokenSubscriptionWhereInput;
  OR?:
    | GoogleFitAccessTokenSubscriptionWhereInput[]
    | GoogleFitAccessTokenSubscriptionWhereInput;
  NOT?:
    | GoogleFitAccessTokenSubscriptionWhereInput[]
    | GoogleFitAccessTokenSubscriptionWhereInput;
}

export interface GoogleFitAccessTokenUpdateOneRequiredInput {
  create?: GoogleFitAccessTokenCreateInput;
  update?: GoogleFitAccessTokenUpdateDataInput;
  upsert?: GoogleFitAccessTokenUpsertNestedInput;
  connect?: GoogleFitAccessTokenWhereUniqueInput;
}

export interface GoogleFitAccountUpdateDataInput {
  refreshToken?: String;
  accessToken?: GoogleFitAccessTokenUpdateOneRequiredInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
}>;

export interface UserUpdateInput {
  email?: String;
  password?: String;
  googleFitAccount?: GoogleFitAccountUpdateOneInput;
}

export interface GoogleFitAccountUpdateInput {
  refreshToken?: String;
  accessToken?: GoogleFitAccessTokenUpdateOneRequiredInput;
}

export type GoogleFitAccountWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  googleFitAccount?: GoogleFitAccountWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface GoogleFitAccountWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  refreshToken?: String;
  refreshToken_not?: String;
  refreshToken_in?: String[] | String;
  refreshToken_not_in?: String[] | String;
  refreshToken_lt?: String;
  refreshToken_lte?: String;
  refreshToken_gt?: String;
  refreshToken_gte?: String;
  refreshToken_contains?: String;
  refreshToken_not_contains?: String;
  refreshToken_starts_with?: String;
  refreshToken_not_starts_with?: String;
  refreshToken_ends_with?: String;
  refreshToken_not_ends_with?: String;
  accessToken?: GoogleFitAccessTokenWhereInput;
  AND?: GoogleFitAccountWhereInput[] | GoogleFitAccountWhereInput;
  OR?: GoogleFitAccountWhereInput[] | GoogleFitAccountWhereInput;
  NOT?: GoogleFitAccountWhereInput[] | GoogleFitAccountWhereInput;
}

export interface GoogleFitAccountUpsertNestedInput {
  update: GoogleFitAccountUpdateDataInput;
  create: GoogleFitAccountCreateInput;
}

export interface GoogleFitAccessTokenUpdateInput {
  account_id?: ID_Input;
  value?: String;
  expiration?: DateTimeInput;
}

export interface GoogleFitAccountCreateInput {
  refreshToken: String;
  accessToken: GoogleFitAccessTokenCreateOneInput;
}

export interface GoogleFitAccessTokenCreateOneInput {
  create?: GoogleFitAccessTokenCreateInput;
  connect?: GoogleFitAccessTokenWhereUniqueInput;
}

export interface GoogleFitAccountSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: GoogleFitAccountWhereInput;
  AND?:
    | GoogleFitAccountSubscriptionWhereInput[]
    | GoogleFitAccountSubscriptionWhereInput;
  OR?:
    | GoogleFitAccountSubscriptionWhereInput[]
    | GoogleFitAccountSubscriptionWhereInput;
  NOT?:
    | GoogleFitAccountSubscriptionWhereInput[]
    | GoogleFitAccountSubscriptionWhereInput;
}

export interface GoogleFitAccountUpdateOneInput {
  create?: GoogleFitAccountCreateInput;
  update?: GoogleFitAccountUpdateDataInput;
  upsert?: GoogleFitAccountUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: GoogleFitAccountWhereUniqueInput;
}

export interface GoogleFitAccessTokenWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  account_id?: ID_Input;
  account_id_not?: ID_Input;
  account_id_in?: ID_Input[] | ID_Input;
  account_id_not_in?: ID_Input[] | ID_Input;
  account_id_lt?: ID_Input;
  account_id_lte?: ID_Input;
  account_id_gt?: ID_Input;
  account_id_gte?: ID_Input;
  account_id_contains?: ID_Input;
  account_id_not_contains?: ID_Input;
  account_id_starts_with?: ID_Input;
  account_id_not_starts_with?: ID_Input;
  account_id_ends_with?: ID_Input;
  account_id_not_ends_with?: ID_Input;
  value?: String;
  value_not?: String;
  value_in?: String[] | String;
  value_not_in?: String[] | String;
  value_lt?: String;
  value_lte?: String;
  value_gt?: String;
  value_gte?: String;
  value_contains?: String;
  value_not_contains?: String;
  value_starts_with?: String;
  value_not_starts_with?: String;
  value_ends_with?: String;
  value_not_ends_with?: String;
  expiration?: DateTimeInput;
  expiration_not?: DateTimeInput;
  expiration_in?: DateTimeInput[] | DateTimeInput;
  expiration_not_in?: DateTimeInput[] | DateTimeInput;
  expiration_lt?: DateTimeInput;
  expiration_lte?: DateTimeInput;
  expiration_gt?: DateTimeInput;
  expiration_gte?: DateTimeInput;
  AND?: GoogleFitAccessTokenWhereInput[] | GoogleFitAccessTokenWhereInput;
  OR?: GoogleFitAccessTokenWhereInput[] | GoogleFitAccessTokenWhereInput;
  NOT?: GoogleFitAccessTokenWhereInput[] | GoogleFitAccessTokenWhereInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface GoogleFitAccountCreateOneInput {
  create?: GoogleFitAccountCreateInput;
  connect?: GoogleFitAccountWhereUniqueInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface AggregateGoogleFitAccessTokenNode {
  count: Int;
}

export interface AggregateGoogleFitAccessToken
  extends Promise<AggregateGoogleFitAccessTokenNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateGoogleFitAccessTokenSubscription
  extends Promise<AsyncIterator<AggregateGoogleFitAccessTokenNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface GoogleFitAccountSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface GoogleFitAccountSubscriptionPayload
  extends Promise<GoogleFitAccountSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = GoogleFitAccount>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = GoogleFitAccountPreviousValues>() => T;
}

export interface GoogleFitAccountSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<GoogleFitAccountSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = GoogleFitAccountSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = GoogleFitAccountPreviousValuesSubscription>() => T;
}

export interface GoogleFitAccessTokenEdgeNode {
  cursor: String;
}

export interface GoogleFitAccessTokenEdge
  extends Promise<GoogleFitAccessTokenEdgeNode>,
    Fragmentable {
  node: <T = GoogleFitAccessToken>() => T;
  cursor: () => Promise<String>;
}

export interface GoogleFitAccessTokenEdgeSubscription
  extends Promise<AsyncIterator<GoogleFitAccessTokenEdgeNode>>,
    Fragmentable {
  node: <T = GoogleFitAccessTokenSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserPreviousValuesNode {
  id: ID_Output;
  email: String;
  password: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPreviousValues
  extends Promise<UserPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregateUserNode {
  count: Int;
}

export interface AggregateUser
  extends Promise<AggregateUserNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUserNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface UserSubscriptionPayload
  extends Promise<UserSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = User>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValues>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface PageInfoNode {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfo extends Promise<PageInfoNode>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfoNode>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface UserConnectionNode {}

export interface UserConnection
  extends Promise<UserConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<UserEdgeNode>>() => T;
  aggregate: <T = AggregateUser>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface GoogleFitAccessTokenConnectionNode {}

export interface GoogleFitAccessTokenConnection
  extends Promise<GoogleFitAccessTokenConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<GoogleFitAccessTokenEdgeNode>>() => T;
  aggregate: <T = AggregateGoogleFitAccessToken>() => T;
}

export interface GoogleFitAccessTokenConnectionSubscription
  extends Promise<AsyncIterator<GoogleFitAccessTokenConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<GoogleFitAccessTokenEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateGoogleFitAccessTokenSubscription>() => T;
}

export interface AggregateGoogleFitAccountNode {
  count: Int;
}

export interface AggregateGoogleFitAccount
  extends Promise<AggregateGoogleFitAccountNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateGoogleFitAccountSubscription
  extends Promise<AsyncIterator<AggregateGoogleFitAccountNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface GoogleFitAccountConnectionNode {}

export interface GoogleFitAccountConnection
  extends Promise<GoogleFitAccountConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<GoogleFitAccountEdgeNode>>() => T;
  aggregate: <T = AggregateGoogleFitAccount>() => T;
}

export interface GoogleFitAccountConnectionSubscription
  extends Promise<AsyncIterator<GoogleFitAccountConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<GoogleFitAccountEdgeSubscription>>>() => T;
  aggregate: <T = AggregateGoogleFitAccountSubscription>() => T;
}

export interface GoogleFitAccessTokenPreviousValuesNode {
  id: ID_Output;
  account_id: ID_Output;
  value: String;
  expiration: DateTimeOutput;
}

export interface GoogleFitAccessTokenPreviousValues
  extends Promise<GoogleFitAccessTokenPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  account_id: () => Promise<ID_Output>;
  value: () => Promise<String>;
  expiration: () => Promise<DateTimeOutput>;
}

export interface GoogleFitAccessTokenPreviousValuesSubscription
  extends Promise<AsyncIterator<GoogleFitAccessTokenPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  account_id: () => Promise<AsyncIterator<ID_Output>>;
  value: () => Promise<AsyncIterator<String>>;
  expiration: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface GoogleFitAccessTokenSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface GoogleFitAccessTokenSubscriptionPayload
  extends Promise<GoogleFitAccessTokenSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = GoogleFitAccessToken>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = GoogleFitAccessTokenPreviousValues>() => T;
}

export interface GoogleFitAccessTokenSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<GoogleFitAccessTokenSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = GoogleFitAccessTokenSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = GoogleFitAccessTokenPreviousValuesSubscription>() => T;
}

export interface GoogleFitAccountPreviousValuesNode {
  id: ID_Output;
  refreshToken: String;
}

export interface GoogleFitAccountPreviousValues
  extends Promise<GoogleFitAccountPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  refreshToken: () => Promise<String>;
}

export interface GoogleFitAccountPreviousValuesSubscription
  extends Promise<AsyncIterator<GoogleFitAccountPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  refreshToken: () => Promise<AsyncIterator<String>>;
}

export interface GoogleFitAccessTokenNode {
  id: ID_Output;
  account_id: ID_Output;
  value: String;
  expiration: DateTimeOutput;
}

export interface GoogleFitAccessToken
  extends Promise<GoogleFitAccessTokenNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  account_id: () => Promise<ID_Output>;
  value: () => Promise<String>;
  expiration: () => Promise<DateTimeOutput>;
}

export interface GoogleFitAccessTokenSubscription
  extends Promise<AsyncIterator<GoogleFitAccessTokenNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  account_id: () => Promise<AsyncIterator<ID_Output>>;
  value: () => Promise<AsyncIterator<String>>;
  expiration: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface GoogleFitAccountNode {
  id: ID_Output;
  refreshToken: String;
}

export interface GoogleFitAccount
  extends Promise<GoogleFitAccountNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  refreshToken: () => Promise<String>;
  accessToken: <T = GoogleFitAccessToken>() => T;
}

export interface GoogleFitAccountSubscription
  extends Promise<AsyncIterator<GoogleFitAccountNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  refreshToken: () => Promise<AsyncIterator<String>>;
  accessToken: <T = GoogleFitAccessTokenSubscription>() => T;
}

export interface GoogleFitAccountEdgeNode {
  cursor: String;
}

export interface GoogleFitAccountEdge
  extends Promise<GoogleFitAccountEdgeNode>,
    Fragmentable {
  node: <T = GoogleFitAccount>() => T;
  cursor: () => Promise<String>;
}

export interface GoogleFitAccountEdgeSubscription
  extends Promise<AsyncIterator<GoogleFitAccountEdgeNode>>,
    Fragmentable {
  node: <T = GoogleFitAccountSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserNode {
  id: ID_Output;
  email: String;
  password: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface User extends Promise<UserNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  googleFitAccount: <T = GoogleFitAccount>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<UserNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  googleFitAccount: <T = GoogleFitAccountSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserEdgeNode {
  cursor: String;
}

export interface UserEdge extends Promise<UserEdgeNode>, Fragmentable {
  node: <T = User>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdgeNode>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayloadNode {
  count: Long;
}

export interface BatchPayload extends Promise<BatchPayloadNode>, Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayloadNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

export type Long = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  endpoint: `http://localhost:4466`
});
export const prisma = new Prisma();
