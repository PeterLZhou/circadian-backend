scalar DateTime

type Query {
  me: User
  fitbitAccounts: [FitbitAccount!]!
  sleepDatas: [SleepData!]!
}

type Mutation {
  signup(email: String!, password: String!): AuthPayload!
  login(email: String!, password: String!): AuthPayload!
  getSleepLogs(userId: ID!, date: String!): String!
  deleteAllSleepLogs(userId: ID!): String!
}

type AuthPayload {
  token: String!
  user: User!
}

type User {
  id: ID!
  email: String!
  googleFitAccount: GoogleFitAccount
  fitbitAccount: FitbitAccount
  sleepLogs: [SleepLog!]!
  createdAt: DateTime!
}

type GoogleFitAccount {
  id: ID!
  userId: ID!
  refreshToken: String!
  accessToken: String!
  expiration: DateTime!
}

type FitbitAccount {
  id: ID!
  userId: ID!
  fitbitUserId: String!
  refreshToken: String!
  accessToken: String!
  expiration: DateTime!
}

type SleepLog {
  id: ID!
  userId: ID!
  dateOfSleep: String!
  duration: Int!
  efficiency: Int!
  isMainSleep: Boolean!
  logId: Float!
  minutesAfterWakeup: Int!
  minutesAsleep: Int!
  minutesAwake: Int!
  minutesToFallAsleep: Int!
  startTime: DateTime!
  timeInBed: Int!
  type: String
  data: [SleepData!]!
  summaryDeepCount: Int
  summaryDeepMinutes: Int
  summaryDeepThirtyDayAvgMinutes: Int
  summaryLightCount: Int
  summaryLightMinutes: Int
  summaryLightThirtyDayAvgMinutes: Int
  summaryRemCount: Int
  summaryRemMinutes: Int
  summaryRemThirtyDayAvgMinutes: Int
  summaryWakeCount: Int
  summaryWakeMinutes: Int
  summaryWakeThirtyDayAvgMinutes: Int
  summaryAsleepCount: Int
  summaryAsleepMinutes: Int
  summaryAwakeCount: Int
  summaryAwakeMinutes: Int
  summaryRestlessCount: Int
  summaryRestlessMinutes: Int
}

type SleepData {
  id: ID!
  sleepLogId: ID!
  dateTime: DateTime!
  level: String!
  second: Int!
}
