type User {
  id: ID! @unique
  email: String! @unique
  password: String!
  googleFitAccount: GoogleFitAccount @relation(name: "GoogleFitAccountOnUser", onDelete: CASCADE)
  fitbitAccount: FitbitAccount @relation(name: "FitbitAccountOnUser", onDelete: CASCADE)
  rescueTimeAccount: RescueTimeAccount @relation(name:"RescueTimeAccountOnUser", onDelete: CASCADE)
  sleepLogs: [SleepLog!]! @relation(name: "SleepLogOnUser", onDelete: CASCADE)
  heartLogs: [HeartLog!]! @relation(name: "HeartLogOnUser", onDelete: CASCADE)
  stepLogs: [StepLog!]! @relation(name: "StepLogOnUser", onDelete: CASCADE)
  calorieLogs: [CalorieLog!]! @relation(name: "CalorieLogOnUser", onDelete: CASCADE)
  distanceLogs: [DistanceLog!]! @relation(name: "DistanceLogOnUser", onDelete: CASCADE)
  sleepLogLastUpdatedDate: DateTime
  productivityLogLastUpdatedDate: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
}

type GoogleFitAccount {
  id: ID! @unique
  user: User! @relation(name: "GoogleFitAccountOnUser")
  refreshToken: String!
  accessToken: String!
  expiration: DateTime!
}

type FitbitAccount {
  id: ID! @unique
  user: User! @relation(name: "FitbitAccountOnUser")
  fitbitUserId: String!
  refreshToken: String!
  accessToken: String!
  expiration: DateTime!
}

type RescueTimeAccount {
  id: ID! @unique
  user: User! @relation(name: "RescueTimeAccountOnUser")
  accessToken: String!
  scope: String!
}

type SleepLog {
  id: ID! @unique
  user: User! @relation(name: "SleepLogOnUser")
  dateOfSleep: String!
  duration: Int!
  efficiency: Int!
  isMainSleep: Boolean!
  logId: Float!
  minutesAfterWakeup: Int!
  minutesAsleep: Int!
  minutesAwake: Int!
  minutesToFallAsleep: Int!
  startTime: DateTime!
  timeInBed: Int!
  type: String
  sleepData: [SleepData!]! @relation(name: "SleepDataOnSleepLog", onDelete: CASCADE)
  summaryDeepCount: Int
  summaryDeepMinutes: Int
  summaryDeepThirtyDayAvgMinutes: Int
  summaryLightCount: Int
  summaryLightMinutes: Int
  summaryLightThirtyDayAvgMinutes: Int
  summaryRemCount: Int
  summaryRemMinutes: Int
  summaryRemThirtyDayAvgMinutes: Int
  summaryWakeCount: Int
  summaryWakeMinutes: Int
  summaryWakeThirtyDayAvgMinutes: Int  
  summaryAsleepCount: Int
  summaryAsleepMinutes: Int
  summaryAwakeCount: Int
  summaryAwakeMinutes: Int
  summaryRestlessCount: Int
  summaryRestlessMinutes: Int
}

type SleepData {
  id: ID! @unique
  sleepLog: SleepLog! @relation(name: "SleepDataOnSleepLog")
  dateTime: DateTime!
  level: String!
  second: Int!
}

type HeartLog {
  id: ID! @unique
  user: User! @relation(name: "HeartLogOnUser")
  dateTime: DateTime!
  caloriesOutOfRange: Int!
  minutesOutOfRange: Int!
  maxValueOutOfRange: Int!
  minValueOutOfRange: Int!
  caloriesFatBurn: Int!
  minutesFatBurn: Int!
  maxValueFatBurn: Int!
  minValueFatBurn: Int!
  caloriesCardio: Int!
  minutesCardio: Int!
  maxValueCardio: Int!
  minValueCardio: Int!
  caloriesPeak: Int!
  minutesPeak: Int!
  maxValuePeak: Int!
  minValuePeak: Int!
  heartData: [HeartData!]! @relation(name: "HeartDataOnHeartLog", onDelete: CASCADE)
}

type HeartData {
  id: ID! @unique
  heartLog: HeartLog! @relation(name: "HeartDataOnHeartLog")
  dateTime: DateTime!
  heartRate: Float!
}

type StepLog {
  id: ID! @unique
  user: User! @relation(name: "StepLogOnUser")
  date: DateTime!
  totalSteps: Int!
  stepData: [StepData!]! @relation(name: "StepDataOnStepLog", onDelete: CASCADE)
}

type StepData {
  id: ID! @unique
  stepLog: StepLog! @relation(name: "StepDataOnStepLog")
  dateTime: DateTime!
  steps: Int!
}

type CalorieLog {
  id: ID! @unique
  user: User! @relation(name: "CalorieLogOnUser")
  date: DateTime!
  totalCalories: Float!
  calorieData: [CalorieData!]! @relation(name: "CalorieDataOnCalorieLog", onDelete: CASCADE)
}

type CalorieData {
  id: ID! @unique
  calorieLog: CalorieLog! @relation(name: "CalorieDataOnCalorieLog")
  dateTime: DateTime!
  calories: Float!
}

type DistanceLog {
  id: ID! @unique
  user: User! @relation(name: "DistanceLogOnUser")
  date: DateTime!
  totalDistance: Float!
  distanceData: [DistanceData!]! @relation(name: "DistanceDataOnDistanceLog", onDelete: CASCADE)
}

type DistanceData {
  id: ID! @unique
  distanceLog: DistanceLog! @relation(name: "DistanceDataOnDistanceLog")
  dateTime: DateTime!
  distance: Float!
}

